// Code generated by radius-dict-gen. DO NOT EDIT.

package zte

import (
	"strconv"

	"bitbucket.parspooyesh.com/ibscgw/radius"
	"bitbucket.parspooyesh.com/ibscgw/radius/attributemap"
	"bitbucket.parspooyesh.com/ibscgw/radius/dictionary"
	"bitbucket.parspooyesh.com/ibscgw/radius/rfc2865"
)

const (
	_ZTE_VendorID = 3902
)

var attrOIDMap = map[radius.Type]radius.NameType{
	83: {"ZTE-Rate-Ctrl-Scr-Down", 5, nil},
	89: {"ZTE-Rate-Ctrl-Scr-Up", 5, nil},
}

var attrNameMap = map[string]radius.OIDType{
	"ZTE-Rate-Ctrl-Scr-Down": {83, 5, nil},
	"ZTE-Rate-Ctrl-Scr-Up":   {89, 5, nil},
}

func GetAttrName(T byte) (string, dictionary.AttributeType, func(uint32) (string, error)) {
	name, ok := attrOIDMap[radius.Type(T)]
	if ok {
		return name.Name, name.T, name.ValueMapFunc
	}
	return "", 2, nil
}

func GetAttrOID(name string) (radius.Type, dictionary.AttributeType, func(string) (uint32, error)) {
	t, ok := attrNameMap[name]
	if ok {
		return t.OID, t.T, t.ValueMapFunc
	}
	return -1, dictionary.AttributeOctets, nil
}

func init() {
	attributemap.RegisterVendor(_ZTE_VendorID, GetAttrName, GetAttrOID)
}

func _ZTE_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ZTE_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ZTE_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _ZTE_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _ZTE_AddVendor(p, typ, attr)
}

func _ZTE_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type ZTERateCtrlScrDown uint32

var ZTERateCtrlScrDown_Strings = map[ZTERateCtrlScrDown]string{}

func (a ZTERateCtrlScrDown) String() string {
	if str, ok := ZTERateCtrlScrDown_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlScrDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlScrDown_Add(p *radius.Packet, value ZTERateCtrlScrDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 83, a)
}

func ZTERateCtrlScrDown_Get(p *radius.Packet) (value ZTERateCtrlScrDown) {
	value, _ = ZTERateCtrlScrDown_Lookup(p)
	return
}

func ZTERateCtrlScrDown_Gets(p *radius.Packet) (values []ZTERateCtrlScrDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlScrDown(i))
	}
	return
}

func ZTERateCtrlScrDown_Lookup(p *radius.Packet) (value ZTERateCtrlScrDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlScrDown(i)
	return
}

func ZTERateCtrlScrDown_Set(p *radius.Packet, value ZTERateCtrlScrDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 83, a)
}

func ZTERateCtrlScrDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 83)
}

type ZTERateCtrlScrUp uint32

var ZTERateCtrlScrUp_Strings = map[ZTERateCtrlScrUp]string{}

func (a ZTERateCtrlScrUp) String() string {
	if str, ok := ZTERateCtrlScrUp_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlScrUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlScrUp_Add(p *radius.Packet, value ZTERateCtrlScrUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 89, a)
}

func ZTERateCtrlScrUp_Get(p *radius.Packet) (value ZTERateCtrlScrUp) {
	value, _ = ZTERateCtrlScrUp_Lookup(p)
	return
}

func ZTERateCtrlScrUp_Gets(p *radius.Packet) (values []ZTERateCtrlScrUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlScrUp(i))
	}
	return
}

func ZTERateCtrlScrUp_Lookup(p *radius.Packet) (value ZTERateCtrlScrUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlScrUp(i)
	return
}

func ZTERateCtrlScrUp_Set(p *radius.Packet, value ZTERateCtrlScrUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 89, a)
}

func ZTERateCtrlScrUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 89)
}
